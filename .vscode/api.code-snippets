{
  "createControllerClass": {
    "scope": "typescript",
    "prefix": "controller",
    "body": [
      "import { Http } from '#domain/entities/index.js'",
      "import { IController } from '#presentation/protocols/index.js'",
      "",
      "export class $1Controller implements IController {",
      "  constructor (",
      "    private readonly $1: I$1",
      "  ) {}",
      "",
      "  async handle (request: $1Controller.Request): Promise<Http.Response> {",
      "    try {",
      "      const ${2:result} = await this.$1.()",
      "      return Http.ok($2)",
      "    } catch (error) {",
      "      const internalError = error as InternalError",
      "      ",
      "      if (internalError.isInternal) {",
      "        return Http.badRequest(internalError)",
      "      }",
      "      ",
      "      return Http.serverError(error)",
      "    }",
      "  }",
      "}",
      "",
      "export namespace $1Controller {",
      "  export interface Request {",
      "    $0",
      "  }",
      "}",
      "",
    ],
  },
  "createServiceClass": {
    "scope": "typescript",
    "prefix": "service",
    "body": [
      "import { I$1 } from '#domain/usecases/index.js'",
      "",
      "export class $1 implements I$1 {",
      "  constructor (",
      "    private readonly $2: I$3",
      "  ) {}",
      "",
      "  $0",
      "}",
      "",
    ],
  },
  "createRepositoryClass": {
    "scope": "typescript",
    "prefix": ["repo", "repository"],
    "body": [
      "import { $1 } from '#domain/entities/index.js'",
      "",
      "interface I$1Repository {}",
      "",
      "export class $1Repository implements I$1Repository {",
      "  async create (data: ICreate$1Repository.Params) {",
      "    ",
      "  }",
      "",
      "  async list () {",
      "    ",
      "  }",
      "",
      "  async update (data: IUpdate$1Repository.Params) {",
      "    ",
      "  }",
      "",
      "  async delete (data: IDelete$1Repository.Params) {",
      "    ",
      "  }",
      "}",
      "",
    ],
  },
  "createInterface": {
    "scope": "typescript",
    "prefix": "interface",
    "body": [
      "export interface I$1 {",
      "  $2(data: I$1.Params): Promise<I$1.Result>",
      "}",
      "",
      "export namespace I$1 {",
      "  export interface Params {",
      "    ",
      "  }",
      "  export interface Result {",
      "  ",
      "  }",
      "}",
      "",
    ],
  },
  "createEntity": {
    "scope": "typescript",
    "prefix": "entity",
    "body": [
      "export class $1 {",
      "  private readonly props: $1.Props",
      "",
      "  constructor(params: $1.Params) {",
      "    this.props = {",
      "      ...params",
      "    }",
      "  }",
      "}",
      "",
      "export namespace $1 {",
      "  export interface Params {",
      "    ",
      "  }",
      "",
      "  export interface Props {",
      "    ",
      "  }",
      "}",
      "",
    ],
  },
  "createMapper": {
    "scope": "typescript",
    "prefix": "mapper",
    "body": [
      "import { $1 } from '#domain/entities/index.js'",
      "import { $1 as Prisma$1 } from '@prisma/client'",
      "",
      "export class $1Mapper {",
      "  constructor(private readonly props: $1) {}",
      "",
      "  public toPrisma(): Prisma$1 {",
      "    return {",
      "      $0",
      "    }",
      "  }",
      "",
      "  public toHttp() {",
      "    return {",
      "      ",
      "    }",
      "  }",
      "}",
      "",
    ],
  },
  "createRouter": {
    "scope": "typescript",
    "prefix": "router",
    "body": [
      "/* eslint-disable @typescript-eslint/no-misused-promises */",
      "import { adaptController, adaptMiddleware } from '#main/adapters/index.js'",
      "import { make$1Controller } from '#main/composers/controllers/$2/index.js'",
      "import { makeAuthMiddleware } from '#main/composers/middlewares/index.js'",
      "import { Router } from 'express'",
      "",
      "export default (router: Router): void => {",
      "  const authUser = adaptMiddleware(makeAuthMiddleware())",
      "",
      "  router.${3:get}('/$2', authUser, adaptController(make$1Controller()))",
      "}",
      "",
    ],
  },
  "createDecorator": {
    "scope": "typescript",
    "prefix": "decorator",
    "body": [
      "import { adaptController, adaptMiddleware } from '#main/adapters/index.js'",
      "",
      "export class $1Decorator implements I$2 {",
      "  constructor (",
      "    private readonly $2: I$2",
      "  ) {}",
      "",
      "  $0",
      "}",
      "",
    ],
  },
  "createMakeController": {
    "scope": "typescript",
    "prefix": "makeController",
    "body": [
      "import { IController } from '#presentation/protocols/index.js'",
      "import { $1 } from '#services/usecases/index.js'",
      "",
      "export const make$1Controller = (): IController => {",
      "  const $1 = new $1()",
      "  const controller = new $1Controller($1)",
      "",
      "  return controller",
      "}",
      "",
    ],
  },
  "createMakeValidation": {
    "scope": "typescript",
    "prefix": "makeValidation",
    "body": [
      "import { $1Controller } from '#presentation/controllers/index.js'",
      "import { IValidation } from '#validation/protocols/index.js'",
      "import { RequiredFieldValidation, ValidationComposite } from '#validation/validators/index.js'",
      "",
      "",
      "export const make$1Validation = (): IValidation => {",
      "  const validations: IValidation[] = []",
      "  const fields: Array<keyof $1Controller.Request> = ['$0']",
      "  fields.forEach(field => {",
      "    validations.push(new RequiredFieldValidation(field))",
      "  })",
      "  return new ValidationComposite(validations)",
      "}",
      "",
    ],
  },
  "validRequest": {
    "scope": "typescript",
    "prefix": "validRequest",
    "body": [
      "const error = await this.validation.validate(request)",
      "if (error) {",
      "  return Http.badRequest(error)",
      "}",
      "$0",
    ],
  },
  "returnVoidPromise": {
    "scope": "typescript",
    "prefix": ["rv", "rvp", "void", "returnVoidPromise"],
    "body": [": Promise<void>"],
  },
  "returnPromise": {
    "scope": "typescript",
    "prefix": ["rp", "returnPromise"],
    "body": [": Promise<$0>"],
  },
  "encapsulate": {
    "scope": "typescript",
    "prefix": ["pr", "private"],
    "body": ["private readonly $0"],
  },
  "StaticMapperMap": {
    "scope": "typescript",
    "prefix": ["smap", "StaticMapperMap"],
    "body": [
      "static Map(data: $1[]) {",
      "  return data.map(d => new this(d).to$0())",
      "}",
    ],
  },
  "StaticMapperSample": {
    "scope": "typescript",
    "prefix": ["ssmp", "StaticMapperSample"],
    "body": [
      "static Sample(data: $0 | Sample | undefined) {",
      "  return !data",
      "    ? undefined",
      "    : {",
      "        id: data.id,",
      "        img: data.img,",
      "        name: data.name",
      "      }",
      "}",
    ],
  },
}
